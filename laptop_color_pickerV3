#version 3,use hsv value + Track 2 color value using same trackbar 

import cv2
import numpy as np

# A required callback method that goes into the trackbar function.
def nothing(x):
    pass

width = 800
height = 600

# Use the webcam
cap = cv2.VideoCapture(0)

# Create a window named trackbars.
cv2.namedWindow("Trackbars")

# Now create 6 trackbars that will control the lower and upper range of
# H,S and V channels. The Arguments are like this: Name of trackbar,
# window name, range,callback function. For Hue the range is 0-179 and
# for S,V its 0-255.
cv2.createTrackbar("L - H", "Trackbars", 0, 179, nothing)
cv2.createTrackbar("L - S", "Trackbars", 0, 255, nothing)
cv2.createTrackbar("L - V", "Trackbars", 0, 255, nothing)
cv2.createTrackbar("U - H", "Trackbars", 179, 179, nothing)
cv2.createTrackbar("U - S", "Trackbars", 255, 255, nothing)
cv2.createTrackbar("U - V", "Trackbars", 255, 255, nothing)

colorA_range = None
colorB_range = None

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break

    frame = cv2.resize(frame, (width, height))
    cv2.imshow("Myresult", frame)

    # Convert the BGR image to HSV image.
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Get the new values of the trackbar in real time as the user changes
    # them
    l_h = cv2.getTrackbarPos("L - H", "Trackbars")
    l_s = cv2.getTrackbarPos("L - S", "Trackbars")
    l_v = cv2.getTrackbarPos("L - V", "Trackbars")
    u_h = cv2.getTrackbarPos("U - H", "Trackbars")
    u_s = cv2.getTrackbarPos("U - S", "Trackbars")
    u_v = cv2.getTrackbarPos("U - V", "Trackbars")

    # Set the lower and upper HSV range according to the value selected
    # by the trackbar
    current_lower = np.array([l_h, l_s, l_v])
    current_upper = np.array([u_h, u_s, u_v])

    mask_total = np.zeros((frame.shape[0], frame.shape[1]), dtype=np.uint8)

    if colorA_range is not None:
        maskA = cv2.inRange(hsv, colorA_range[0], colorA_range[1])
        mask_total = cv2.bitwise_or(mask_total, maskA)
    if colorB_range is not None:
        maskB = cv2.inRange(hsv, colorB_range[0], colorB_range[1])
        mask_total = cv2.bitwise_or(mask_total, maskB)

    # Always show current adjusting color
    mask_current = cv2.inRange(hsv, current_lower, current_upper)
    mask_total = cv2.bitwise_or(mask_total, mask_current)

    # You can also visualize the real part of the target color (Optional)
    res = cv2.bitwise_and(frame, frame, mask=mask_total)

    # Converting the binary mask to 3 channel image, this is just so
    # we can stack it with the others
    mask_3 = cv2.cvtColor(mask_total, cv2.COLOR_GRAY2BGR)

    # stack the mask, orginal frame and the filtered result
    stacked = np.hstack((mask_3,frame,res))

    # Show this stacked frame at 40% of the size.
    cv2.imshow('Trackbars',cv2.resize(stacked,None,fx=0.4,fy=0.4))

    # If the user presses ESC then exit the program
    key = cv2.waitKey(1)
    if key == 27:
        break

    # If the user presses `s` then print this array.
    if key == 27: # ESC
        break
    elif key == ord('q'):
        colorA_range = [current_lower, current_upper]
        np.save('hsv_valueA', colorA_range)
        print("Color A saved:", colorA_range)
    elif key == ord('w'):
        colorB_range = [current_lower, current_upper]
        np.save('hsv_valueB', colorB_range)
        print("Color B saved:", colorB_range)

cap.release()
cv2.destroyAllWindows()
